@using PaginaEEST1.Services
@using PaginaEEST1.Data.Enums
@using PaginaEEST1.Data.Models.Images
@using System.IO
@inject IMessageService message
@inject IImageService ImageService

<InputFile OnChange="HandleImage" />

@code {
    [Parameter]
    public TypeImage ImageType { get; set; }

    private InputFileChangeEventArgs? InputFile { get; set; }

    private async Task HandleImage(InputFileChangeEventArgs e)
    {
        InputFile = e;
        await InvokeAsync(StateHasChanged);
    }

    public async Task<bool> SaveImage(int ReferenceId, string ProfileId = "null")
    {
        try
        {
            if (InputFile == null)
                return false;

            // Convertir el archivo a byte array
            byte[] imageContent;
            using (var ms = new MemoryStream())
            {
                await InputFile.File.OpenReadStream().CopyToAsync(ms);
                imageContent = ms.ToArray();
            }

            switch (ImageType)
            {
                case TypeImage.AreaImage:
                    var save_area = new AreaImage_Area
                        {
                            ImageName = InputFile.File.Name,
                            TypeFile = InputFile.File.ContentType,
                            ImageType = ImageType,
                            AreaId = ReferenceId,
                            ImageContent = imageContent
                        };
                    await ImageService.SaveImage(save_area);
                    break;

                case TypeImage.ProfileImage:
                    var save_profile = new ProfileImage_Person
                        {
                            ImageName = InputFile.File.Name,
                            TypeFile = InputFile.File.ContentType,
                            ImageType = ImageType,
                            PersonId = ProfileId,
                            ImageContent = imageContent
                        };
                    await ImageService.SaveImage(save_profile);
                    break;

                case TypeImage.ItemImage:
                    var save_item = new ItemImage_Item
                        {
                            ImageName = InputFile.File.Name,
                            TypeFile = InputFile.File.ContentType,
                            ImageType = ImageType,
                            ItemId = ReferenceId,
                            ImageContent = imageContent
                        };
                    await ImageService.SaveImage(save_item);
                    break;
            }
            return true;
        }
        catch (Exception ex)
        {
            await message.Error($"Error inesperado al cargar la imagen: {ex.Message}");
            return false;
        }
    }
}