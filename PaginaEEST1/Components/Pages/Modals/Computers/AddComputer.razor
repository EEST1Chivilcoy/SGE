@using PaginaEEST1.Services
@using PaginaEEST1.Data.Enums
@using PaginaEEST1.Data.Models.PhysicalObjects
@using PaginaEEST1.Data.ViewModels
@inject IMessageService message
@inject IAreaService AreaService
@inject IComputerService ComputerService

<div>
    <Form Model="@computerVM" OnFinish="OnFinish">
        <div clas="form-grid">
            <FormItem Label="Estado del Ordenador">
                <EnumSelect TEnum="ComputerStatus" @bind-Value="@computerVM.Status" />
            </FormItem>
            <FormItem Label="Nombre o Codigo">
                <Input @bind-Value="@computerVM.DeviceName" />
            </FormItem>
            <FormItem Label="Sistema Operativo">
                <Input @bind-Value="@computerVM.OperatingSystem" />
            </FormItem>
            <FormItem Label="Procesador">
                <Input @bind-Value="@computerVM.Processor" />
            </FormItem>
            <FormItem Label="RAM">
                <Input @bind-Value="@computerVM.RAM">
                <Suffix>
                    GB
                </Suffix>
                </Input>
            </FormItem>
            <FormItem Label="Almacenamiento">
                <Input @bind-Value="@computerVM.Storage">
                <Suffix>
                    GB
                </Suffix>
                </Input>
            </FormItem>
            <FormItem Label="Tipo de almacenamiento">
                <EnumSelect TEnum="TypeStorage" @bind-Value="@computerVM.typeStorage" />
            </FormItem>
            @* Selección del tipo del dispositivo: Computadora / Netbook *@
            <FormItem Label="Tipo de Dispositivo">
                <div class="device-type-selector">
                    <div class="device-option @(computerVM.Type == TypeComputer.Computer ? "selected" : "")" @onclick="() => SelectDeviceType(TypeComputer.Computer)">
                        <img src="/Images/Logo_Desktop.png" alt="Computadora" />
                        <span>Computadora</span>
                    </div>
                    <div class="device-option @(computerVM.Type == TypeComputer.Netbook ? "selected" : "")" @onclick="() => SelectDeviceType(TypeComputer.Netbook)">
                        <img src="/Images/Logo_Netbook.png" alt="Netbook" />
                        <span>Netbook</span>
                    </div>
                </div>
            </FormItem>
            @if (computerVM.Type == TypeComputer.Computer)
            {
                <FormItem Label="Ubicación dentro de la Institución">
                    <Select
                        @bind-Value="@computerVM.LocationId"
                        DataSource="@areas"
                        TItem="AreaViewModel"
                        TItemValue="int"
                        LabelName="@nameof(AreaViewModel.Name)"
                        ValueName="@nameof(AreaViewModel.Id)"
                        DefaultActiveFirstOption = "true"
                        Placeholder="No se encuentra salones disponibles"
                        />
                </FormItem>
            }
            @if (computerVM.Type == TypeComputer.Netbook)
            {
                <FormItem Label="Modelo de la Netbook">
                    <Input @bind-Value="@computerVM.Model" />
                </FormItem>
                <FormItem Label="Disponibilidad de la Netbook">
                    <Switch @bind-Value="@computerVM.IsAvailable" />
                </FormItem>
            }
            <FormItem>
                <Button Type="primary" HtmlType="submit">Guardar</Button>
                <Button OnClick="HandleClose">Cerrar</Button>
            </FormItem>
        </div>
    </Form>
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }
    //Variables
    private ComputerViewModel computerVM = new() { Type = TypeComputer.Computer, IsAvailable = true };
    private List<AreaViewModel> areas = new();

    // Funciones
    private async Task HandleClose()
    {
        await OnClose.InvokeAsync(false);
    }
    private void SelectDeviceType(TypeComputer PCType)
    {
        computerVM.Type = PCType;
        StateHasChanged();
    }
    private async Task OnFinish()
    {
        if (computerVM.Type == TypeComputer.Computer)
        {
            Desktop desktop = new()
                {
                    DeviceName = computerVM.DeviceName,
                    Type = computerVM.Type,
                    Status = computerVM.Status,
                    OperatingSystem = computerVM.OperatingSystem,
                    Processor = computerVM.Processor,
                    RAM = computerVM.RAM,
                    Storage = computerVM.Storage,
                    typeStorage = computerVM.typeStorage,
                    LocationId = computerVM.LocationId
                };
            await ComputerService.SaveComputer(desktop);
        }
        else if (computerVM.Type == TypeComputer.Netbook)
        {
            Netbook netbook = new()
                {
                    DeviceName = computerVM.DeviceName,
                    Type = computerVM.Type,
                    Status = computerVM.Status,
                    OperatingSystem = computerVM.OperatingSystem,
                    Processor = computerVM.Processor,
                    RAM = computerVM.RAM,
                    Storage = computerVM.Storage,
                    typeStorage = computerVM.typeStorage,
                    Model = computerVM.Model,
                    IsAvailable = computerVM.IsAvailable
                };
            await ComputerService.SaveComputer(netbook);
        }
        computerVM = new();
        await OnClose.InvokeAsync(true);
        StateHasChanged();
    }

    // Init
    protected override async Task OnInitializedAsync()
    {
        areas = await AreaService.GetListAreas();
    }

    // View Model
    private class ComputerViewModel
    {
        public string? DeviceName { get; set; }
        public TypeComputer Type { get; set; }
        public ComputerStatus Status { get; set; }
        public string? OperatingSystem { get; set; }
        public string? Processor { get; set; }
        public int? RAM { get; set; }
        public int? Storage { get; set; }
        public TypeStorage typeStorage { get; set; }
        public string? Model { get; set; }
        public bool IsAvailable { get; set; }
        public int LocationId { get; set; }
    }
}