@using PaginaEEST1.Components.Pages.Modals.Areas
@using PaginaEEST1.Data.Models.Categories
@using PaginaEEST1.Data.Models.Images
@using PaginaEEST1.Data.ViewModels
@using PaginaEEST1.Data.Enums
@using PaginaEEST1.Services
@using PaginaEEST1.Shared
@inject HttpClient Http
@inject IAreaService AreaService
@inject IMessageService message
@inject NavigationManager NavigationManager

<Card Class="area-card">
    <img src="@imageSrc" alt="Foto del Salón" class="card-image" />
    <div class="card-content">@area.Name</div>
    <div class="card-buttons">
        <Icon Type="eye" Theme="outline" Class="card-button" OnClick="() => {visDetails = true;}" />
        <Icon Type="edit" Theme="outline" Class="card-button" OnClick="() => {visEdit = true;}" />
        <Popconfirm Title="¿Remover este Salón?"
                    OnConfirm="() => delArea(area.Id)"
                    OkText="Si"
                    CancelText="No">
            <Icon Type="delete" Theme="outline" Class="card-button" />
        </Popconfirm>
    </div>
</Card>

@if (visDetails == true)
{
    <Modal Visible="visDetails" Title="Detalles del salón" Footer="null" OnCancel="() => visDetails = false">
        <DetailsArea ID="@area.Id" />
    </Modal>
}

@if (visEdit == true)
{
    <Modal Visible="visEdit" Title="Edición del salón" Footer="null" OnCancel="() => visEdit = false">
        <EditArea ID="@area.Id" OnClose="closeEdit" />
    </Modal>
}

@code {
    // Parametros
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public AreaViewModel area { get; set; } = null!;

    // Variables
    private bool visDetails = false;
    private bool visEdit = false;
    private string? imageSrc { get; set; }

    // Funciones
    private async Task closeEdit(bool success)
    {
        visEdit = false;
        if (success == true)
            await OnClose.InvokeAsync(true);
        StateHasChanged();
    }
    private async Task delArea(int ID)
    {
        await AreaService.DelArea(ID);
        await OnClose.InvokeAsync(true);
        StateHasChanged();
        await message.Success("Se removio el salón");
    }

    // Init
    protected override async Task OnParametersSetAsync()
    {
        var baseUrl = NavigationManager.BaseUri.TrimEnd('/');
        var response = await Http.GetAsync($"{baseUrl}/api/Images/{area.ImageId}");

        if (response.IsSuccessStatusCode)
        {
            var imageBytes = await response.Content.ReadAsByteArrayAsync();

            string mimeType = response.Content.Headers.ContentType?.MediaType ?? "image/png";

            imageSrc = $"data:{mimeType};base64,{Convert.ToBase64String(imageBytes)}";
        }
    }
}