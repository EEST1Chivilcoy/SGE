@using System.ComponentModel.DataAnnotations
@using PaginaEEST1.Data.Models.Categories
@using PaginaEEST1.Data.Models.SchoolArea
@using PaginaEEST1.Data.Enums
@using PaginaEEST1.Services

@*Servicios Utilizados*@
@inject IMessageService message
@inject IAreaService AreaService
@inject ICategoryService CategoryService

<div>
    <Form Model="@areaVM" OnFinish="OnFinish">
        <div class="form-grid">
            <FormItem Label="Subir Foto">
                <ImageInput @ref="ImageUpload" ImageType="TypeImage.AreaImage" />
            </FormItem>
            <FormItem Label="Nombre del Salón">
                <Input @bind-Value="@areaVM.Name" />
            </FormItem>
            <FormItem Label="Ubicación">
                <Input @bind-Value="@areaVM.Location" />
            </FormItem>
            <FormItem Label="Tipo de Área">
                <EnumSelect TEnum="TypeArea" @bind-Value="@areaVM.AreaType" />
            </FormItem>
            @* Categoría *@
            <FormItem Label="Seleccione la categoría">
                <AutoComplete @bind-Value="@areaVM.Category" Options="@categories" Style="min-width:200px" />
            </FormItem>
            <FormItem Label="Orientación del Área">
                <EnumSelect TEnum="EducationalGuidance" @bind-Value="@areaVM.AreaGuidance" />
            </FormItem>
            <FormItem>
                <Button Type="primary" HtmlType="submit">Guardar</Button>
                <Button OnClick="HandleClose">Cerrar</Button>
            </FormItem>
        </div>
    </Form>
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    // Variables
    private List<string> categories = new();
    private AreaViewModel areaVM = new();
    private ImageInput? ImageUpload { get; set; }

    // Funciones
    private async Task HandleClose()
    {
        await OnClose.InvokeAsync(false);
    }
    private async Task OnFinish()
    {
        Area area = new()
            {
                Name = areaVM.Name ?? "Salón sin nombre",
                Location = areaVM.Location ?? "Sin especificar",
                AreaType = areaVM.AreaType,
                AreaGuidance = areaVM.AreaGuidance
            };
        if (!string.IsNullOrEmpty(areaVM.Category)){
            Category? category = await CategoryService.SaveCategory(TypeCategory.AreaCategory, areaVM.Category);
            if (category != null && category is AreaCategory areaCategory)
                area.Category = areaCategory;
        }

        Area? save = await AreaService.SaveArea(area);

        if (save != null)
        {
            if (ImageUpload != null)
                await ImageUpload.SaveImage(save.Id);
            areaVM = new();
            await OnClose.InvokeAsync(true);
            StateHasChanged();
            await message.Success("Se registro el salón");
        }
        else
        {
            await message.Error("Error inesperado al guardar el salón");
        }
    }
    // Init
    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetListCategories(TypeCategory.AreaCategory);
        StateHasChanged();
    }

    // View Model
    private class AreaViewModel()
    {
        [Required]
        public string? Name { get; set; }
        [Required]
        public string? Location { get; set; }
        public TypeArea AreaType { get; set; }
        public string? Category { get; set; }
        public EducationalGuidance AreaGuidance { get; set; }
    }
}