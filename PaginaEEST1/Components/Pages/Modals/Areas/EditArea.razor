@using PaginaEEST1.Data.Models.SchoolArea
@using PaginaEEST1.Data.Models.Categories
@using PaginaEEST1.Data.ViewModels
@using PaginaEEST1.Data.Enums
@using PaginaEEST1.Services
@inject IMessageService message
@inject IAreaService AreaService
@inject ICategoryService CategoryService

<div clas="container">
    <Form Model="@areaVM" OnFinish="OnFinish">
        <div clas="form-grid">
            <FormItem Label="Nombre del Salón">
                <Input @bind-Value="@areaVM.Name" />
            </FormItem>
            <FormItem Label="Ubicación">
                <Input @bind-Value="@areaVM.Location" />
            </FormItem>
            <FormItem Label="Tipo de área">
                <EnumSelect TEnum="TypeArea" @bind-Value="@areaVM.AreaType" />
            </FormItem>
            @* Categoría *@
            <FormItem Label="Seleccione la categoría">
                <AutoComplete @bind-Value="@AreaCategory" Options="@categories" Style="min-width:200px" />
            </FormItem>
            <FormItem Label="Orientación del Área">
                <EnumSelect TEnum="EducationalGuidance" @bind-Value="@areaVM.AreaGuidance" />
            </FormItem>
            <FormItem>
                <Button Type="primary" HtmlType="submit">Editar</Button>
                <Button OnClick="HandleClose">Cerrar</Button>
            </FormItem>
        </div>
    </Form>
</div>

@code {
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public int ID { get; set; }
    private Area areaVM { get; set; } = null!;
    private List<string> categories = new();
    private string? AreaCategory { get; set; }

    // Funciones
    private async Task HandleClose()
    {
        await OnClose.InvokeAsync(false);
    }
    private async Task OnFinish()
    {
        try
        {
            if (!string.IsNullOrEmpty(AreaCategory)){
                Category? category = await CategoryService.SaveCategory(TypeCategory.AreaCategory, AreaCategory);
                if (category != null && category is AreaCategory areaCategory)
                    areaVM.Category = areaCategory;
            }
            await AreaService.EditArea(areaVM);
            await OnClose.InvokeAsync(true);
            StateHasChanged();
            await message.Success("Ordenador editado con exito");
        }
        catch
        {
            await message.Warning("Error inesperado al editar el Ordenador.");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var area = await AreaService.GetArea(ID);
        AreaCategory = await CategoryService.GetCategoryByReference(TypeCategory.AreaCategory, ID);
        if (area != null)
            areaVM = area;
        StateHasChanged();
    }
}