@using System.ComponentModel.DataAnnotations
@using PaginaEEST1.Data.Models.SchoolArea
@using PaginaEEST1.Data.Models.Categories
@using PaginaEEST1.Data.ViewModels
@using PaginaEEST1.Data.Enums
@using PaginaEEST1.Services
@inject IMessageService message
@inject IAreaService AreaService
@inject ICategoryService CategoryService

<div clas="container">
    <Form Model="@areaVM" OnFinish="OnFinish">
        <div clas="form-grid">
            <FormItem Label="Nombre del Salón">
                <Input @bind-Value="@areaVM.Name" />
            </FormItem>
            <FormItem Label="Ubicación">
                <Input @bind-Value="@areaVM.Location" />
            </FormItem>
            <FormItem Label="Tipo de área">
                <EnumSelect TEnum="TypeArea" @bind-Value="@areaVM.AreaType" />
            </FormItem>
            @* Categoría *@
            <FormItem Label="Seleccione la categoría">
                <AutoComplete @bind-Value="@areaVM.Category" Options="@categories" Style="min-width:200px" />
            </FormItem>
            <FormItem Label="Orientación del Área">
                <EnumSelect TEnum="EducationalGuidance" @bind-Value="@areaVM.AreaGuidance" />
            </FormItem>
            <FormItem>
                <Button Type="primary" HtmlType="submit">Editar</Button>
                <Button OnClick="HandleClose">Cerrar</Button>
            </FormItem>
        </div>
    </Form>
</div>

@code {
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public int ID { get; set; }
    private AreaViewModel areaVM { get; set; } = new();
    private List<string> categories = new();

    // Funciones
    private async Task HandleClose()
    {
        await OnClose.InvokeAsync(false);
    }
    private async Task OnFinish()
    {
        try
        {
            Area area = new()
                {
                    Id = areaVM.Id,
                    Name = areaVM.Name ?? "Salón sin nombre",
                    Location = areaVM.Location ?? "Sin especificar",
                    AreaType = areaVM.AreaType,
                    AreaGuidance = areaVM.AreaGuidance
                };
            if (!string.IsNullOrEmpty(areaVM.Category)){
                Category? category = await CategoryService.SaveCategory(TypeCategory.AreaCategory, areaVM.Category);
                if (category != null && category is AreaCategory areaCategory)
                    area.Category = areaCategory;
            }
            await AreaService.EditArea(area);
            await OnClose.InvokeAsync(true);
            StateHasChanged();
            await message.Success("Ordenador editado con exito");
        }
        catch
        {
            await message.Warning("Error inesperado al editar el Ordenador.");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var area = await AreaService.GetArea(ID);
            if (area != null)
            {
                areaVM = new()
                {
                    Id = area.Id,
                    Name = area.Name,
                    Location = area.Location,
                    AreaType = area.AreaType,
                    AreaGuidance = area.AreaGuidance,
                    Category = area.Category?.Name ?? ""
                };
            }
            categories = await CategoryService.GetListCategories(TypeCategory.AreaCategory);
        }
        catch(Exception ex)
        {
            await message.Error(ex.Message);
        }
        StateHasChanged();
    }


    // View Model
    private class AreaViewModel()
    {
        public int Id { get; set; }
        [Required]
        public string? Name { get; set; }
        [Required]
        public string? Location { get; set; }
        public TypeArea AreaType { get; set; }
        public string? Category { get; set; }
        public EducationalGuidance AreaGuidance { get; set; }
    }
}