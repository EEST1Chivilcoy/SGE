@using AntDesign
@inject IJSRuntime JS

@using PaginaEEST1.Data.Models.People.PeopleAssets

<div>
    <div class="contribuciones">
        <div class="meses">
            <div class="mes-label"></div> <!-- Espacio para las etiquetas de los días de la semana -->
            @foreach (var mes in Meses)
            {
                <div class="mes" style="grid-column: span 4;">@mes</div> <!-- Ajuste para que cada mes ocupe 4 columnas -->
            }
        </div>
        @for (int i = 0; i < 7; i++)
        {
            <div class="semana">
                <div class="semana-label">@Semanas[i]</div>
                @for (int j = 0; j < 52; j++)
                {
                    var asistencia = Asistencias.FirstOrDefault(a => a.Fecha.DayOfWeek == (DayOfWeek)i && GetWeekOfYear(a.Fecha) == j + 1);
                    if (asistencia != null)
                    {
                        var intensidad = Math.Min(asistencia.Entradas + asistencia.Salidas, 4);
                        <div class="contribucion" style="background-color: @GetColor(intensidad)" @onclick="() => MostrarDetalles(asistencia)">
                            <span class="tooltip">@asistencia.Fecha.ToString("dd/MM/yyyy")<br />Entradas: @asistencia.Entradas<br />Salidas: @asistencia.Salidas</span>
                        </div>
                    }
                    else
                    {
                        <div class="contribucion" style="background-color: #ebedf0"></div>
                    }
                }
            </div>
        }
    </div>
</div>

@code {
    private List<string> Meses = new List<string> { "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic" };
    private List<string> Semanas = new List<string> { "Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sáb" };

    private List<Asistencia> Asistencias = new List<Asistencia>
    {
        new Asistencia { Fecha = DateTime.Now.AddDays(-1), Entradas = 3, Salidas = 2 },
        new Asistencia { Fecha = DateTime.Now.AddDays(-2), Entradas = 1, Salidas = 1 },
        // Agrega más datos aquí
    };

    private string GetColor(int intensidad)
    {
        return intensidad switch
        {
            1 => "#ebedf0",
            2 => "#c6e48b",
            3 => "#7bc96f",
            4 => "#239a3b",
            _ => "#196127",
        };
    }

    private async Task MostrarDetalles(Asistencia asistencia)
    {
        await JS.InvokeVoidAsync("alert", $"Fecha: {asistencia.Fecha}\nEntradas: {asistencia.Entradas}\nSalidas: {asistencia.Salidas}");
    }

    private int GetWeekOfYear(DateTime date)
    {
        var dfi = System.Globalization.DateTimeFormatInfo.CurrentInfo;
        var calendar = dfi.Calendar;
        return calendar.GetWeekOfYear(date, dfi.CalendarWeekRule, dfi.FirstDayOfWeek);
    }
}