@using AntDesign
@inject IJSRuntime JS

@using PaginaEEST1.Data.Models.People.PeopleAssets
@using PaginaEEST1.Data.Enums

<div>
    <div class="contribuciones">
        <div class="meses">
            <div class="mes-label"></div> <!-- Espacio para las etiquetas de los días de la semana -->
            @foreach (var mes in Meses)
            {
                <div class="mes" style="grid-column: span 4;">@mes</div> <!-- Ajuste para que cada mes ocupe 4 columnas -->
            }
        </div>
        @for (int i = 0; i < 7; i++)
        {
            <div class="semana">
                <div class="semana-label">@Semanas[i]</div>
                @for (int j = 0; j < 52; j++)
                {
                    var asistencia = Asistencias.FirstOrDefault(a => a.Date.DayOfWeek == (DayOfWeek)i && GetWeekOfYear(a.Date) == j + 1);
                    if (asistencia != null)
                    {
                        // Calculamos la intensidad basándonos en el número de entradas y salidas
                        var entradas = asistencia.Records.Count(r => r.Type == AttendanceType.Entry);
                        var salidas = asistencia.Records.Count(r => r.Type == AttendanceType.Exit);
                        var intensidad = Math.Min(entradas + salidas, 4);

                        <div class="contribucion" style="background-color: @GetColor(intensidad)" @onclick="() => MostrarDetalles(asistencia)">
                            <span class="tooltip">@asistencia.Date.ToString("dd/MM/yyyy")<br />Entradas: @entradas<br />Salidas: @salidas</span>
                        </div>
                    }
                    else
                    {
                        <div class="contribucion" style="background-color: #ebedf0"></div>
                    }
                }
            </div>
        }
    </div>
</div>

@code {
    private List<string> Meses = new List<string> { "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic" };
    private List<string> Semanas = new List<string> { "Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sáb" };

    private List<Data.Models.People.PeopleAssets.Attendance> Asistencias = new List<Data.Models.People.PeopleAssets.Attendance>
    {
        new Data.Models.People.PeopleAssets.Attendance
        {
            Date = DateTime.Now.AddDays(-1),
            Records = new List<AttendanceRecord>
            {
                new AttendanceRecord { Time = DateTime.Now.AddHours(-1), Type = AttendanceType.Entry },
                new AttendanceRecord { Time = DateTime.Now.AddHours(-2), Type = AttendanceType.Entry },
                new AttendanceRecord { Time = DateTime.Now.AddHours(-3), Type = AttendanceType.Exit },
            }
        },
        new Data.Models.People.PeopleAssets.Attendance
        {
            Date = DateTime.Now.AddDays(-2),
            Records = new List<AttendanceRecord>
            {
                new AttendanceRecord { Time = DateTime.Now.AddHours(-4), Type = AttendanceType.Entry },
                new AttendanceRecord { Time = DateTime.Now.AddHours(-5), Type = AttendanceType.Exit },
            }
        },
        // Agrega más datos aquí
    };

    private string GetColor(int intensidad)
    {
        return intensidad switch
        {
            1 => "#ebedf0",
            2 => "#c6e48b",
            3 => "#7bc96f",
            4 => "#239a3b",
            _ => "#196127",
        };
    }

    private async Task MostrarDetalles(Data.Models.People.PeopleAssets.Attendance asistencia)
    {
        var entradas = asistencia.Records.Count(r => r.Type == AttendanceType.Entry);
        var salidas = asistencia.Records.Count(r => r.Type == AttendanceType.Exit);
        await JS.InvokeVoidAsync("alert", $"Fecha: {asistencia.Date}\nEntradas: {entradas}\nSalidas: {salidas}");
    }

    private int GetWeekOfYear(DateTime date)
    {
        var dfi = System.Globalization.DateTimeFormatInfo.CurrentInfo;
        var calendar = dfi.Calendar;
        return calendar.GetWeekOfYear(date, dfi.CalendarWeekRule, dfi.FirstDayOfWeek);
    }
}