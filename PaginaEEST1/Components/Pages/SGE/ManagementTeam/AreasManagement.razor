@using PaginaEEST1.Services
@using PaginaEEST1.Components.Pages.Modals
@using PaginaEEST1.Data.ViewModels
@using PaginaEEST1.Data.Enums
@using PaginaEEST1.Shared
@using PaginaEEST1.Data.Models.Categories
@inject IAreaService AreaService
@page "/SGE/Directivo/GestionSalones"

@using PaginaEEST1.Components.Layout.SGE
@layout SGELayout

@* Temporalmente el rol de EMATP cuenta con la autorización de ver la página para realizar pruebas *@
@attribute [Authorize (Roles = "EMATP,Directivo")]

<style>
    .container {
        width: 96%;
        height: 96%;
        background-color: #ebf1f7;
        border-radius: 1vw;
        margin: 4vw;
        padding: 20px;
    }

    .area-card {
        margin: 10px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 340px;
        width: 270px;
        border-radius: 1vw;
        border: 1px solid #e0e0e0;
        background-color: #ffffff;
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .area-card:hover {
            transform: scale(1.03);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

    .add-card {
        margin: 10px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 340px;
        width: 270px;
        align-items: center;
        justify-content: center;
        color: #0c2c45;
        font-weight: bold;
        font-size: 18px;
        text-align: center;
        background-color: #a9c8e0;
        border: 2px solid #081e30;
        border-radius: 1vw;
        backdrop-filter: blur(10px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .add-card:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 15px rgba(29, 57, 196, 0.3);
        }

    .add-icon {
        font-size: 90px;
        color: #0c2c45;
        margin-bottom: 15px;
    }

    .card-image {
        width: 100%;
        height: 220px;
        border-radius: 1vw 1vw 0 0;
        object-fit: cover;
    }

    .card-content {
        padding: 10px;
        text-align: center;
        font-size: 18px;
        font-weight: bold;
        color: #333;
    }

    .card-buttons {
        display: flex;
        justify-content: space-around;
        padding: 10px;
        border-top: 1px solid #e0e0e0;
    }

    .card-button {
        color: #595959;
        font-size: 22px;
        cursor: pointer;
        transition: color 0.2s, transform 0.2s;
    }

        .card-button:hover {
            color: #1890ff;
            transform: scale(1.1);
        }

    .header {
        width: 100%;
        border-bottom: 0.3vw solid white;
        margin-bottom: 20px;
    }

    .header-text {
        font-size: 18px;
        font-weight: bold;
        margin-right: 10px;
        color: #0c2c45;
    }

    .form-select {
        padding: 0.375rem 2.25rem 0.375rem 0.75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: #212529;
        background-color: #fff;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        margin-left: 10px;
    }
</style>
<div class="container">
    <Flex Vertical Justify="flex-start" Align="center" Style="height: 100%; width:100%;">
        <div class="header">
            <Flex Align="center" Justify="space-between" Style="width: 100%;">
                <h1 style="margin: 0; color: #0c2c45;"><b>Salones</b></h1>
                <div style="display: flex; align-items: center;">
                    <p class="header-text">Filtrar por categoría:</p>
                    <Select TItem="string"
                           TItemValue="string"
                           DefaultValue="@selectedCategory"
                           Style="width: 200px"
                           ValueChanged="OnCategoryChanged">
                        <SelectOptions>
                            <SelectOption TItem="string" TItemValue="string" Value="@("Todos")" Label="Todos" />
                            <SelectOption TItem="string" TItemValue="string" Value="@("Sin categoría")" Label="Sin categoría" />
                            @foreach (string? category in categories)
                            {
                                <SelectOption TItem="string" TItemValue="string" Value="@category" Label="@category" />
                            }
                        </SelectOptions>
                    </Select>
                </div>
            </Flex>
        </div>
        
        <Flex Justify="flex-start" Align="flex-start" Wrap="wrap" Style="width: 100%;">
            <!-- Carta / Botón para cargar nuevo salón -->
            <Card Class="area-card add-card">
                <div @onclick="@(() => visAdd = true)">
                    <Icon Type="plus-circle" Theme="fill" Class="add-icon"/>
                    <p>Cargar un nuevo salón</p>
                </div>
            </Card>
            
            <!-- Cartas del resto de salones -->
            @foreach (AreaViewModel? area in areas){
                if (area != null){
                    <Card Class="area-card">
                        @* Temporalmente no se adjunta ninguna imagen hasta que se desarrollen las funciones relacionadas a la carga de imagenes *@
                        <img src="" alt="Foto del Salón" class="card-image"/>
                        <div class="card-content">@area.Name</div>
                        <div class="card-buttons">
                                <Icon Type="eye" Theme="outline" Class="card-button" OnClick="() => HandleDetails(area.Id)" />
                            <Popconfirm Title="¿Remover este Salón?"
                                    OnConfirm="() => delArea(area.Id)"
                                    OkText="Si"
                                    CancelText="No"
                                >
                                <Icon Type="delete" Theme="outline" Class="card-button" />
                            </Popconfirm>
                        </div>
                    </Card>
                }
            }
        </Flex>
    </Flex>
</div>

@if (visAdd == true)
{
    <Modal Visible="visAdd" Title="Cargar un nuevo salón." Footer="null" OnCancel="() => closeModals(false)">
        <AddArea OnClose="closeModals" />
    </Modal>
}
@if (visDetails == true)
{
    <Modal Visible="visDetails" Title="Detalles del salón." Footer="null" OnCancel="() => closeModals(false)">
        <DetailsArea ID="@idDetails" />
    </Modal>
}

@code {
    // Variables    
    private List<AreaViewModel?> AllAreas = new();
    private List<AreaViewModel?> areas = new();
    private List<string?> categories = new();
    // Variables de Visibilidad
    private string selectedCategory = "Todos";
    private bool visAdd = false;
    private bool visDetails = false;
    private int idDetails { get; set; }
    
    // Funciones de Visibilidad
    private Task HandleDetails(int ID){
        idDetails = ID;
        visDetails = true;
        return Task.CompletedTask;
    }
    private Task OnCategoryChanged(string value)
    {   
        selectedCategory = value;
        FilterAreas();
        StateHasChanged();
        return Task.CompletedTask;
    }
    private async Task closeModals(bool success)
    {
        visAdd = false;
        visDetails = false;
        if (success == true)
        {
            await OnInitializedAsync();
        }
        StateHasChanged();
    }

    private void FilterAreas(){
        if (selectedCategory == "Todos" || string.IsNullOrEmpty(selectedCategory)){
            areas = AllAreas;
        }
        else if (selectedCategory == "Sin categoría"){
            areas = AllAreas.Where(cat => string.IsNullOrEmpty(cat?.CategoryName) || cat?.CategoryName == "Sin categoría").ToList();
        }
        else{
            areas = AllAreas.Where(cat => cat?.CategoryName == selectedCategory).ToList();
        }
    }
    // Funciones
    private async Task delArea(int ID)
    {
        await AreaService.DelArea(ID);
        await OnInitializedAsync();
    }
    // Init
    protected override async Task OnInitializedAsync()
    {
        AllAreas = await AreaService.GetListAreas();
        FilterAreas();
        categories = AllAreas
            .Where(name => !string.IsNullOrEmpty(name?.CategoryName))
            .Select(name => name?.CategoryName)
            .ToList();
        await base.OnInitializedAsync();
    }
}