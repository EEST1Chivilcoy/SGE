@page "/SGE/EMATP/GestionSolicitudes"
@using PaginaEEST1.Components.Pages.Modals
@using PaginaEEST1.Data.Models.PhysicalObjects.PhysicalAssets.Request
@using PaginaEEST1.Data.ViewModels
@using PaginaEEST1.Data.Enums
@using PaginaEEST1.Services
@using PaginaEEST1.Shared
@inject IRequestService RequestService
@inject IComputerService ComputerService
@inject MessageService message

@using PaginaEEST1.Components.Layout.SGE
@layout SGELayout

@attribute [Authorize(Roles = "EMATP")]
@*Definimos que esta pagina solo puede ser vista por EMATP*@

@* Tablas *@
<Row Style="height: 100%; width:100%; margin: 1vw; border-radius: 1vw;">
    @foreach (var status in Enum.GetValues(typeof(RequestStatus)))
    {
        <AntDesign.Col Style="width: 33%; height: 100%;">
            <Card Title="@GetStatusTitle((RequestStatus)status)">
                <div @ondrop="@((e) => OnDrop(e, (RequestStatus)status))"
                @ondragover:preventDefault
                     @ondragover="@((e) => {})"
                     class="drop-zone">
                    @foreach (var request in GetRequestsByStatus((RequestStatus)status))
                    {
                        <div @ondragstart="@((e) => OnDragStart(e, request))"
                             @ondragend="@(() => RequestDrag = null)"
                             draggable="true"
                             class="draggable-card">
                            <Card Hoverable Style="font-size: 14px; position: relative;">
                                <div @onclick="@(() => ShowDetails(request))">
                                    <Flex>
                                        <p>@request.Type.GetDisplayName()</p>
                                        <p style="color: grey; text-align: right; right: 0; margin-left: auto;">@request.RequestDate.ToShortDateString()</p>
                                    </Flex>
                                    <hr />
                                    <h3><b>@request.ShortDescription</b></h3>
                                </div>
                                <Dropdown Trigger="new Trigger[] { Trigger.Click }" Placement="@Placement.BottomRight">
                                    <Overlay>
                                        <Menu>
                                            <Popconfirm Title="¬øEliminar esta Solicitud?"
                                                        OnConfirm="() => DelRequest(request.ID)"
                                                        OkText="Si"
                                                        CancelText="No">
                                                <MenuItem>
                                                    <Icon Type="delete" Theme="outline" />
                                                    Eliminar
                                                </MenuItem>
                                            </Popconfirm>
                                        </Menu>
                                    </Overlay>
                                    <ChildContent>
                                        <a class="ant-dropdown-link" @onclick:preventDefault style="position: absolute; top: 5px; right: 5px;">
                                            <Icon Type="ellipsis" Theme="outline" />
                                        </a>
                                    </ChildContent>
                                </Dropdown>
                            </Card>
                        </div>
                    }
                </div>
            </Card>
        </AntDesign.Col>
    }
</Row>

@* Modals *@
<Modal Title="@(RequestSelect?.ShortDescription)" Visible="@_DetailVisible"
       OnCancel="@(() => _DetailVisible = false)" Footer="null">
    @if (RequestSelect != null)
    {
        <DetailsRequest ID="RequestSelect.ID" CloseModal="(async => HandleCloseDetail())" />
    }
</Modal>

<Modal Title="Establezca una fecha estimada de terminaci√≥n." Visible="@_DateVisible"
       OnCancel="@(() => _DateVisible = false)"
       Footer="null">
    <DatePicker @bind-Value="@_estimatedCompletionDate" />
    <br><br>
    <Button Type="primary" OnClick="@HandleDateModalOk">Guardar</Button>
</Modal>

@code {
    // Variables sobre solicitudes
    private List<RequestViewModel?> _requests = new();
    private DateTime? _estimatedCompletionDate;
    // Variables sobre funcionalidad de arrastre
    private RequestViewModel? RequestSelect;
    private RequestViewModel? RequestDrag;
    private RequestViewModel? RequestDateDrag;
    //Variables sobre modals
    private bool _DetailVisible = false;
    private bool _DateVisible = false;

    // Funciones de visibilidad de Modals
    private Task ShowDetails(RequestViewModel request)
    {
        RequestSelect = request;
        _DetailVisible = true;
        return Task.CompletedTask;
    }

    private string GetStatusTitle(RequestStatus status)
    {
        switch (status)
        {
            case RequestStatus.Pendiente:
                return ("‚è≥ Pendientes");
            case RequestStatus.EnProceso:
                return ("üõ†Ô∏è En proceso");
            case RequestStatus.Completada:
                return ("‚òëÔ∏è Completados");
            default:
                return ("Sin categoria");
        }
    }

    private IEnumerable<RequestViewModel> GetRequestsByStatus(RequestStatus status)
    {
        return _requests
            .Where(r => r != null && r.Status == status)
            .Cast<RequestViewModel>();
    }

    // Funciones relacionadas a la funcionalidad de arrastre
    private void OnDragStart(DragEventArgs e, RequestViewModel request)
    {
        RequestDrag = request;
        e.DataTransfer.EffectAllowed = "move";
    }

    private async Task OnDrop(DragEventArgs e, RequestStatus newStatus)
    {
        if (RequestDrag != null && RequestDrag.Status != newStatus)
        {
            if (RequestDrag.Status == RequestStatus.Pendiente && newStatus == RequestStatus.EnProceso)
            {
                RequestDateDrag = RequestDrag;
                _DateVisible = true;
            }
            else
            {
                await UpdateRequestStatus(RequestDrag, newStatus);
            }
        }
        RequestDrag = null;
    }
    // Funciones de actualizaci√≥n
    private async Task DelRequest(int Id)
    {
        await RequestService.DelRequest(Id);
        await OnInitializedAsync();
    }
    private async Task HandleDateModalOk()
    {
        if (RequestDateDrag != null && _estimatedCompletionDate.HasValue)
        {
            await RequestService.UpdateDate(RequestDateDrag.ID, _estimatedCompletionDate.Value);
            await UpdateRequestStatus(RequestDateDrag, RequestStatus.EnProceso);
            _DateVisible = false;
            RequestDateDrag = null;
            RequestDrag = null;
            _estimatedCompletionDate = null;
        }
    }
    private async Task HandleCloseDetail()
    {
        _DetailVisible = false;
        await OnInitializedAsync();
        StateHasChanged();
    }
    private async Task UpdateRequestStatus(RequestViewModel request, RequestStatus newStatus)
    {
        bool success = await RequestService.UpdateStatus(request.ID, newStatus);
        if (success)
        {
            request.Status = newStatus;
            _requests = new();
            await OnInitializedAsync();
            await message.Success("Estado actualizado correctamente");
        }
        else
        {
            await message.Error("Error inesperado al actualizar el estado");
        }
        StateHasChanged();
    }
    // Init
    protected override async Task OnInitializedAsync()
    {
        _requests = await RequestService.GetListRequests();
        StateHasChanged();
    }
}