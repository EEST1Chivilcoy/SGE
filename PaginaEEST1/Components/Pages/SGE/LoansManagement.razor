@using PaginaEEST1.Data.Models.PhysicalObjects.PhysicalAssets.Loan
@using PaginaEEST1.Components.Pages.Modals.Loans
@using PaginaEEST1.Data.Models.PhysicalObjects
@using PaginaEEST1.Data.ViewModels
@using PaginaEEST1.Data.Enums
@using PaginaEEST1.Services
@using PaginaEEST1.Shared
@using PaginaEEST1.Components.Layout.SGE
@inject ILoanService LoanService
@layout SGELayout
@page "/SGE/Prestamos_Netbooks"

@attribute [Authorize (Roles = "Profesores, EMATP")]

<style>
.card-button {
    color: #595959;
    font-size: 22px;
    cursor: pointer;
    transition: color 0.2s, transform 0.2s;
}

.return-button:hover {
    color: #18ff3e;
    transform: scale(1.1);
}

.details-button:hover {
    color: #1890ff;
    transform: scale(1.1);
}

.cancel-button:hover {
    color: #ff1818;
    transform: scale(1.1);
}
</style>

<Flex Justify="center" Align="center" Style="height: 100%; width:100%;">
    <div class="template">
        <div class="header-content">
            <div class="square">
                <p>Prestamos pendientes:</p>
                <p>@loans.Where(l => l.Status == LoanStatus.Pending).ToList().Count()</p>
            </div>
            <div class="square">
                <p>Prestamos en uso:</p>
                <p>@loans.Where(l => l.Status == LoanStatus.Busy).ToList().Count()</p>
            </div>
            <div class="square">
                <p>Prestamos entregados:</p>
                <p>@loans.Where(l => l.Status == LoanStatus.Returned).ToList().Count()</p>
            </div>
        </div>
        <div class="loans-display">
            <Table TItem="NetbookLoanViewModel"
                   DataSource="@loans.Where(l => l.Status != LoanStatus.Returned)"
                   PageIndex="1"
                   PageSize="6"
                   Responsive>
                <TitleTemplate>
                    <Flex Justify="space-between" Align="center" Style="width:100%;">
                        <h3 style="font-family: Arial;">Lista de prestamos</h3>
                        <Button Type="primary"
                                OnClick="() => {visAdd = true;}">
                            <Icon Type="plus" /> Solicitar un Prestamo
                        </Button>
                    </Flex>
                </TitleTemplate>
                <ColumnDefinitions>
                    @* Datos *@
                    <PropertyColumn Title="Estado" Property="@(v => v.Status.GetDisplayName())" Sortable />
                    <PropertyColumn Title="Fecha requerido" Property="@(v => v.RequiredDate)" Sortable/>
                    <PropertyColumn Title="Hora de inicio y entrega" Property="@(v => v.StartTime + " a " + v.FinishTime)" Sortable />
                    <PropertyColumn Title="Curso" Property="@(v => v.SchoolGrade)" Sortable />
                    <ActionColumn Title="Netbooks solicitadas" Align="ColumnAlign.Center">
                        <Dropdown Id="@($"dropdown_{context.Id}")" Trigger="new Trigger[] { Trigger.Click }">
                            <Overlay>
                                <Menu Id="@($"menu_{context.Id}")">
                                    @if (context.Netbooks != null && context.Netbooks.Any())
                                    {
                                        @foreach (var name in context.Netbooks)
                                        {
                                            <MenuItem>
                                                <Space>
                                                    <SpaceItem>
                                                        <Icon Type="laptop" />
                                                    </SpaceItem>
                                                    <SpaceItem>
                                                        @name
                                                    </SpaceItem>
                                                </Space>
                                            </MenuItem>
                                        }
                                    }
                                    else
                                    {
                                        <MenuItem>
                                            <Empty />
                                        </MenuItem>
                                    }
                                </Menu>
                            </Overlay>
                            <ChildContent>
                                <Button Type="link" Class="ant-dropdown-link">
                                    Netbooks (@(context.Netbooks?.Count ?? 0)) <Icon Type="down" />
                                </Button>
                            </ChildContent>
                        </Dropdown>
                    </ActionColumn>
                    <!-- Acciones de EMATP -->
                    <AuthorizeView Roles="EMATP, Directivo">
                        <Authorized Context="auth_context">
                            <ActionColumn>
                                <Popover Title="Marcar como entregado" Trigger="new Trigger[] { Trigger.Hover }">
                                    <Icon Type="check-circle" Theme="outline" Class="card-button return-button"
                                        OnClick="() => updateStatus(context.Id)" />
                                </Popover>
                                <Popover Title="Ver detalles" Trigger="new Trigger[] { Trigger.Hover }">
                                    <Icon Type="question-circle" Theme="outline" Class="card-button details-button"
                                        OnClick="() => {}" />
                                </Popover>
                                <Popconfirm Title="Â¿Caneclar esta Solicitud?"
                                        OnConfirm="() => cancelLoan(context.Id)"
                                        OkText="Si"
                                        CancelText="No"
                                    >
                                    <Popover Title="Cancelar" Trigger="new Trigger[] { Trigger.Hover }">
                                        <Icon Type="close-circle" Theme="outline" Class="card-button cancel-button"/>
                                    </Popover>
                                </Popconfirm>
                            </ActionColumn>
                        </Authorized>
                    </AuthorizeView>
                </ColumnDefinitions>
            </Table>
        </div>
    </div>
</Flex>

@if (visAdd == true)
{
    <Modal Title="Solicitar un prestamo" Visible="visAdd" Footer="null" OnCancel="() => closeModals(false)">
        <RequestLoan OnClose="closeModals" />
    </Modal>
}

@code{
    // Variables
    List<NetbookLoanViewModel> loans = new();
    private bool visAdd = false;

    // Funciones
    private async Task updateStatus(int Id)
    {
        await LoanService.UpdateStatus(Id, LoanStatus.Returned);
        await OnInitializedAsync();
        return;
    }
    private async Task cancelLoan(int Id)
    {
        await LoanService.CancelLoan(Id);
        await OnInitializedAsync();
        return;
    }
    private async Task closeModals(bool success)
    {
        visAdd = false;
        if (success == true)
        {
            await OnInitializedAsync();
        }
        StateHasChanged();
    }

    // Init
    protected override async Task OnInitializedAsync()
    {
        loans = await LoanService.GetNetbookLoans();
        StateHasChanged();
    }
}