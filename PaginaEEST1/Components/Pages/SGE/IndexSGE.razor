@page "/SGE/index"
@using AntDesign
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@using PaginaEEST1.Components.Pages.Modals

@using PaginaEEST1.Components.Layout.SGE
@layout SGELayout

@attribute [Authorize(Roles = "EMATP,Profesores")]

<div style="display: flex; justify-content: center; align-items: center; min-height: 100vh; background-color: #f0f2f5; width: 100%;">
    <Row Gutter="16" Style="width: 100%; max-width: 1200px;">
        <Col Span="6">
        <Card Title="Perfil" Style="margin: 16px 0; overflow: hidden;">
            <div style="text-align: center; margin-bottom: 3px;">
                <Avatar Size="64" Icon="user" />
            </div>
            <div style="text-align: center; padding: 0 16px;">
                <h3 style="word-wrap: break-word;">@userName, @userSurname</h3>
                <p style="word-wrap: break-word;">@userEmail</p>
                <Tag Color="blue">@userRole</Tag>
            </div>
        </Card>
        </Col>
        <Col Span="18">
        <Card Style="margin: 16px; padding: 24px;">
            <Row Gutter="16">
                <Col Span="12">
                <Button Type="primary" Block OnClick="@(() => NavigateTo("/SGE/EMATP/GestionOrdenadores"))">
                    <Icon Type="desktop" Theme="outline" />
                    Gestión de Ordenadores
                </Button>
                </Col>
                <Col Span="12">
                <Button Type="primary" Block OnClick="@(() => NavigateTo("/SGE/EMATP/GestionSolicitudes"))">
                    <Icon Type="schedule" Theme="fill" />
                    Gestión de Peticiones
                </Button>
                </Col>
            </Row>
        </Card>
        <Card Title="Asistencias" Style="margin: 16px; padding: 24px;">
            <Attendance></Attendance>
        </Card>
        </Col>
    </Row>
</div>

@code {
    private string? userName, userEmail, userSurname, userRole;

    private void NavigateTo(string route)
    {
        NavigationManager.NavigateTo(route, true);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user != null && user.Identity != null && user.Identity.IsAuthenticated)
        {
            // Usamos los ClaimTypes estándar para mayor claridad y consistencia
            var personIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            userName = user.FindFirst(ClaimTypes.GivenName)?.Value;
            userSurname = user.FindFirst(ClaimTypes.Surname)?.Value;
            userEmail = user.FindFirst(ClaimTypes.Email)?.Value;
            userRole = user.FindFirst(ClaimTypes.Role)?.Value;
        }
    }
}