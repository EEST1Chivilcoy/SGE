@using PaginaEEST1.Data.Models.PhysicalObjects.PhysicalAssets.Request
@using PaginaEEST1.Data.Models.PhysicalObjects
@using PaginaEEST1.Services
@using PaginaEEST1.Data.ViewModels
@using PaginaEEST1.Data.Enums
@inject IComputerService ComputerService
@inject IRequestService RequestService
@inject IMessageService message
@page "/Computadora_VistaQR_{ID_Computadora:int}"

<head>
    <title>Computadora @ID_Computadora</title>
</head>

<Flex Justify="center" Align="center" Style="height: 100%; width:100%;">
    @if (QRComputer != null)
    {
        <div class="pc-container">
            <div class="pc-info">
                <h1>@QRComputer.DeviceName</h1>
                <ul>
                    <li><b>Estado: </b> @QRComputer.Status</li>
                    <li><b>Sistema Operativo: </b> @QRComputer.OperatingSystem</li>
                    <li><b>Procesador: </b> @QRComputer.Processor</li>
                    <li><b>Memoria RAM: </b> @QRComputer.RAM GB</li>
                    <li><b>Almacenamiento: </b> @QRComputer.Storage GB</li>
                    <li><b>Tipo de almacenamiento: </b> @QRComputer.typeStorage</li>
                    @if (QRComputer is Desktop desktop)
                    {
                        <li><b>Ubicación: </b> @desktop.Location</li>
                    }
                    @if (QRComputer is Netbook netbook)
                    {
                        <li><b>Modelo: </b> @netbook.Model</li>

                        <li>
                            <b>Disponibilidad: </b>
                            @if (netbook.IsAvailable == true)
                            {
                                <text>Disponible</text>
                            }
                            else
                            {
                                <text>En uso</text>
                            }
                        </li>
                    }
                </ul>
                <AuthorizeView Roles="EMATP,Profesores">
                    <Authorized>
                        <div class="request-container">
                            <Form Model="@RequestVM" OnFinish="OnFinish" Context="_reqcontext">
                                <div class="request-title">
                                    <h3>Reportar una solicitud</h3>
                                    <FormItem Label="Tipo" Class="bold-label">
                                        <Select
                                        TItemValue="@TypeRequest"
                                        TItem="@TypeRequest"
                                        DefaultValue="@TypeRequest.Instalacion"
                                        Value = "@RequestVM.Type"
                                        ValueChanged = "@(value => RequestVM.Type = value)"
                                        >
                                            <SelectOptions>
                                                <SelectOption Value="@TypeRequest.Instalacion" Label="Instalación de un programa" />
                                                <SelectOption Value="@TypeRequest.ReporteFallo" Label="Reporte de fallos" />
                                            </SelectOptions>
                                        </Select>
                                    </FormItem>
                                    <span><b>Fecha:</b> @DateTime.Now.ToString("dd/MM/yyyy")</span>
                                </div>
                                <div class="form-grid">
                                    <FormItem Label="Descripción corta de la solicitud" Class="bold-label" LabelCol="new ColLayoutParam { Span = 24 }">
                                        <Input @bind-Value="@RequestVM.ShortDescription" />
                                    </FormItem>
                                    @if (RequestVM.Type == TypeRequest.Instalacion)
                                    {
                                        <FormItem Label="Nombre del Programa" Class="bold-label" LabelCol="new ColLayoutParam { Span = 24 }">
                                            <Input TValue="string" @bind-value="@RequestVM.NameProgram" />
                                        </FormItem>
                                        <FormItem Label="Versión del Programa" Class="bold-label" LabelCol="new ColLayoutParam { Span = 24 }">
                                            <Input TValue="string" @bind-value="@RequestVM.VersionProgram" />
                                        </FormItem>
                                    }
                                    @if (RequestVM.Type == TypeRequest.ReporteFallo)
                                    {
                                        <FormItem Label="Descripción del Fallo" Class="bold-label" LabelCol="new ColLayoutParam { Span = 24 }">
                                            <Input TValue="string" @bind-value="@RequestVM.FailureDescription" />
                                        </FormItem>
                                        <FormItem Label="Nivel de Prioridad" Class="bold-label" LabelCol="new ColLayoutParam { Span = 24 }">
                                            <EnumSelect TEnum="FailurePreority" @bind-Value="@RequestVM.Preority" DefaultValue="@FailurePreority.Baja" />
                                        </FormItem>
                                    }
                                    <FormItem>
                                        <Button Type="primary" HtmlType="submit">Reportar</Button>
                                    </FormItem>
                                </div>
                            </Form>
                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <a clas="noc" href="/Auth/Login" style="color: grey; font-size: 14px;"> Inicia Sesión para reportar una solicitud. </a>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
            <img src="@(QRComputer?.Type == TypeComputer.Computer ? "Images/Logo_Desktop.png" : "Images/Logo_Netbook.png")" class="pc-logo" />
        </div>
    }
</Flex>

@code {
    [Parameter]
    public int ID_Computadora { get; set; }
    private Computer? QRComputer { get; set; }
    private QRViewModel RequestVM = new();

    private class QRViewModel
    {
        public TypeRequest Type { get; set; }
        public string? ShortDescription { get; set; }
        public string? FailureDescription { get; set; }
        public FailurePreority Preority { get; set; }
        public string? NameProgram { get; set; }
        public string? VersionProgram { get; set; }
    }

    private async Task OnFinish()
    {
        try
        {
            //Agregqar conversion
            bool saved = false;
            if (RequestVM.Type == TypeRequest.ReporteFallo)
            {
                FailureRequest save = new()
                    {
                        Type = RequestVM.Type,
                        ShortDescription = RequestVM.ShortDescription,
                        ComputerId = ID_Computadora,
                        RequestDate = DateTime.Now,
                        FailureDescription = RequestVM.FailureDescription ?? "No se específico la falla",
                        Preority = RequestVM.Preority
                    };
                saved = await RequestService.SaveRequest(save);
            }
            else if (RequestVM.Type == TypeRequest.Instalacion)
            {
                InstallationRequest save = new()
                    {
                        Type = RequestVM.Type,
                        ShortDescription = RequestVM.ShortDescription,
                        ComputerId = ID_Computadora,
                        RequestDate = DateTime.Now,
                        NameProgram = RequestVM.NameProgram ?? "No se específico el nombre del programa.",
                        VersionProgram = RequestVM.VersionProgram
                    };
                saved = await RequestService.SaveRequest(save);
            }
            if (saved == true)
            {
                RequestVM = new();
                StateHasChanged();
                await message.Success("Se registro la solicitud con exito");
            }
            else
            {
                await message.Error("Error inesperado al guardar la solicitud");
            }
        }
        catch
        {
            await message.Error("Error inesperado al cargar la solicitud");
        }
    }

    // Init
    protected override async Task OnInitializedAsync()
    {
        QRComputer = await ComputerService.GetComputer(ID_Computadora);
        StateHasChanged();
    }
}